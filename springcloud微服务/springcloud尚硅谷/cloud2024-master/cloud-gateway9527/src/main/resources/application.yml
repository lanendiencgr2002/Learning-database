server:
  port: 9527

spring:
  application:
    name: cloud-gateway #以微服务注册进consul或nacos服务列表内
  cloud:
    consul: #配置consul地址
      host: localhost
      port: 8500
      discovery: # 注册到consul注册中心中
        prefer-ip-address: true
        service-name: ${spring.application.name}
    gateway: # 网关配置
      routes: # 找得到对应的路劲访问，不然不能访问 
        - id: pay_routh1 #pay_routh1                 # 路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
#          uri: http://localhost:8001                # 匹配后提供服务的路由地址
          uri: lb://cloud-payment-service            # 匹配后提供服务的路由地址
          predicates: #访问网关的，可以转到对应的服务（相当于隐藏了真实的服务地址） 转到对应微服务的/pay/gateway/get/**路劲上
            - Path=/pay/gateway/get/**               # 断言，路径相匹配的进行路由
            - After=2023-12-30T23:02:39.079979400+08:00[Asia/Shanghai] # 断言，时间在指定时间之后
            #- Cookie=username,zzyy                  # 断言，cookie中要有username参数 值为zzyy
            #- Header=X-Request-Id, \d+              # 请求头要有X-Request-Id属性并且值为整数的正则表达式
            #- Host=**.atguigu.com                   # 断言，主机名匹配
            #- Query=username, \d+                   # 这是get请求参数 要有参数名username并且值还要是整数才能路由
            #- RemoteAddr=192.168.124.1/24           # 外部访问我的IP限制，最大跨度不超过32，目前是1~24它们是 CIDR 表示法。192.168.124.x才能访问 
            #- My=gold                               # 自定义了myroutepredicate 值为gold， 会报错，缺少shortcutFieldOrder方法的实现
#            - name: My #自定义了myroutepredicate 值为gold，
#              args:
#                userType: diamond

        - id: pay_routh2 #pay_routh2                #路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
          #uri: http://localhost:8001                #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service
          predicates:
            - Path=/pay/gateway/info/**              # 断言，路径相匹配的进行路由

        - id: pay_routh3 #pay_routh3
          uri: lb://cloud-payment-service                #匹配后提供服务的路由地址
          predicates: 
            - Path=/pay/gateway/filter/**              # 断言，路径相匹配的进行路由，默认正确地址
            #- Path=/gateway/filter/**              # 断言，为配合PrefixPath测试过滤，暂时注释掉/pay
            #- Path=/XYZ/abc/{segment}           # 断言，为配合SetPath测试，{segment}的内容最后被SetPath取代 这个跟过滤器的setpath那配合，这里传啥到那就是啥
          filters: # 可以添加请求头 或者xxxx操作  先过predicates再过filters
            - My=atguigu
            #- RedirectTo=302, http://www.atguigu.com/ # 访问http://localhost:9527/pay/gateway/filter跳转到http://www.atguigu.com/
            #- SetPath=/pay/gateway/{segment}  # {segment}表示占位符，用于传参，你写abc也行但要上下一致
            #- PrefixPath=/pay # http://localhost:9527/pay/gateway/filter  被分拆为: PrefixPath + Path 前端可以访问不带pay的路劲 这里会自动加上/pay在路劲前缀
            - AddRequestHeader=X-Request-atguigu1,atguiguValue1  # 请求头kv，若一头含有多参则重写一行设置
            #- AddRequestHeader=X-Request-atguigu2,atguiguValue2
            #- RemoveRequestHeader=sec-fetch-site      # 删除请求头sec-fetch-site
            #- SetRequestHeader=sec-fetch-mode, Blue-updatebyzzyy # 将请求头sec-fetch-mode对应的值修改为Blue-updatebyzzyy 可覆盖
            #- AddRequestParameter=customerId,9527001 # 新增请求参数Parameter：k ，v 如果原本有，则不会覆盖
            #- RemoveRequestParameter=customerName   # 删除url请求参数customerName，你传递过来也是null
            #- AddResponseHeader=X-Response-atguigu, BlueResponse # 新增请求参数X-Response-atguigu并设值为BlueResponse
            #- SetResponseHeader=Date,2099-11-11 # 设置回应头Date值为2099-11-11
            #- RemoveResponseHeader=Content-Type # 将默认自带Content-Type回应属性删除